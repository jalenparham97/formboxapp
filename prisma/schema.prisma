// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.String
    access_token      String?  @db.String
    expires_at        Int?
    expires_in        Int?
    ext_expires_in    Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.String
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                       String            @id @default(auto()) @map("_id") @db.ObjectId
    name                     String?
    firstName                String?
    lastName                 String?
    email                    String?           @unique
    password                 String?
    emailVerified            DateTime?
    image                    String?
    accounts                 Account[]
    sessions                 Session[]
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripePriceId            String?
    stripeSubscriptionStatus String?
    stripePlanNickname       String?
    stripeCancelAtPeriodEnd  Boolean?          @default(false)
    stripeCurrentPeriodEnd   DateTime?
    orgs                     Org[]
    orgMembers               OrgMember[]
    workspaceMembers         WorkspaceMember[]
    createdAt                DateTime          @default(now())
    updatedAt                DateTime          @updatedAt

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Org {
    id                       String      @id @default(auto()) @map("_id") @db.ObjectId
    name                     String?
    slug                     String?     @unique
    userId                   String      @db.ObjectId
    user                     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    invites                  OrgInvite[]
    members                  OrgMember[]
    workspaces               Workspace[]
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripePriceId            String?
    stripeSubscriptionStatus String?
    stripePlanNickname       String?
    stripeCancelAtPeriodEnd  Boolean?    @default(false)
    stripeCurrentPeriodEnd   DateTime?
    createdAt                DateTime    @default(now())
    updatedAt                DateTime    @updatedAt

    @@map("organizations")
}

model OrgInvite {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String
    expires   DateTime
    org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String   @db.ObjectId
    createdAt DateTime @default(now())

    @@unique([email, orgId])
    @@map("organizationInvites")
}

model OrgMember {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    role      String   @default("member")
    org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, orgId])
    @@map("organizationMembers")
}

model Workspace {
    id         String            @id @default(auto()) @map("_id") @db.ObjectId
    name       String?
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    invites    WorkspaceInvite[]
    members    WorkspaceMember[]
    org        Org               @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId      String            @db.ObjectId
    orgOwnerId String            @db.ObjectId
    isPrivate  Boolean           @default(false)

    @@unique([orgOwnerId, orgId])
    @@map("workspaces")
}

model WorkspaceInvite {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    email       String
    expires     DateTime
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @db.ObjectId
    createdAt   DateTime  @default(now())

    @@unique([email, workspaceId])
    @@map("workspaceInvites")
}

model WorkspaceMember {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    role        String    @default("member")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String    @db.ObjectId
    userId      String    @db.ObjectId
    user        User      @relation(fields: [userId], references: [id])

    @@unique([userId, workspaceId])
    @@map("workspaceMembers")
}
