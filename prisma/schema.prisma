// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.String
    access_token      String?  @db.String
    expires_at        Int?
    expires_in        Int?
    ext_expires_in    Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.String
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                       String      @id @default(auto()) @map("_id") @db.ObjectId
    name                     String?
    firstName                String?
    lastName                 String?
    email                    String?     @unique
    password                 String?
    emailVerified            DateTime?
    image                    String?
    accounts                 Account[]
    sessions                 Session[]
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripePriceId            String?
    stripeSubscriptionStatus String?
    stripePlanNickname       String?
    stripeCancelAtPeriodEnd  Boolean?    @default(false)
    stripeCurrentPeriodEnd   DateTime?
    orgs                     Org[]
    orgMembers               OrgMember[]
    createdAt                DateTime    @default(now())
    updatedAt                DateTime    @updatedAt

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Org {
    id                       String      @id @default(auto()) @map("_id") @db.ObjectId
    name                     String?
    slug                     String?     @unique
    userId                   String      @db.ObjectId
    user                     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    invites                  OrgInvite[]
    members                  OrgMember[]
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripePriceId            String?
    stripeSubscriptionStatus String?
    stripePlanNickname       String?
    stripePlan               String?
    stripeCancelAtPeriodEnd  Boolean?    @default(false)
    stripeCurrentPeriodEnd   DateTime?
    createdAt                DateTime    @default(now())
    updatedAt                DateTime    @updatedAt
    forms                    Form[]

    @@map("organizations")
}

model OrgInvite {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String
    expires   DateTime
    org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String   @db.ObjectId
    createdAt DateTime @default(now())

    @@unique([email, orgId])
    @@map("organizationInvites")
}

model OrgMember {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    role      String   @default("member")
    org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])

    @@unique([userId, orgId])
    @@map("organizationMembers")
}

model Form {
    id                               String               @id @default(auto()) @map("_id") @db.ObjectId
    name                             String
    userId                           String?              @db.ObjectId
    org                              Org?                 @relation(fields: [orgId], references: [id])
    orgId                            String?              @db.ObjectId
    pageMode                         FormPageMode         @default(compact)
    headerImage                      FileObject?
    logo                             FileObject?
    removeFormboxBranding            Boolean              @default(false)
    sendEmailNotifications           Boolean              @default(true)
    defaultEmailTo                   String               @default("") // This is the default email to send notifications to
    emailsToNotify                   String[]
    saveAnswers                      Boolean              @default(false)
    submissionStorageDuration        String               @default("60")
    sendRespondantEmailNotifications Boolean              @default(false)
    respondantEmailFromName          String               @default("")
    respondantEmailSubject           String               @default("")
    respondantEmailMessageHTML       String               @default("")
    showCustomClosedMessage          Boolean              @default(false)
    submitButtonText                 String               @default("Submit")
    closeMessageDescription          String               @default("")
    closeMessageTitle                String               @default("")
    limitResponses                   Boolean              @default(false)
    isClosed                         Boolean              @default(false)
    maxResponses                     Int?
    useCustomRedirect                Boolean              @default(false)
    customSuccessUrl                 String               @default("")
    customFailUrl                    String               @default("")
    webhookEnabled                   Boolean              @default(false)
    webhookUrl                       String               @default("")
    customHoneypot                   String               @default("")
    googleRecaptchaEnabled           Boolean              @default(false)
    googleRecaptchaSecretKey         String               @default("")
    allowedDomains                   String               @default("")
    headerTitle                      String               @default("")
    headerDescription                String               @default("")
    backgroundColor                  String               @default("#ffffff")
    textColor                        String               @default("#000000")
    buttonBackgroundColor            String               @default("#030712")
    buttonTextColor                  String               @default("#ffffff")
    accentColor                      String               @default("#030712")
    buttonBorderStyle                FormInputBorderStyle @default(rounded)
    inputBorderStyle                 FormInputBorderStyle @default(rounded)
    fields                           FormField[]
    submissions                      Submission[]
    createdAt                        DateTime             @default(now())
    updatedAt                        DateTime             @updatedAt
    integrations                     Integration[]

    @@map("forms")
}

enum FormPageMode {
    compact
    full
}

enum FormInputBorderStyle {
    full
    rounded
    flat
}

type FormField {
    id              String
    label           String
    options         FormOption[]
    required        Boolean
    subtype         String
    type            String
    description     String       @default("")
    showDescription Boolean      @default(false)
}

type FormOption {
    id    String
    value String
}

model Submission {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    formId    String   @db.ObjectId
    answers   Answer[]
    isSpam    Boolean  @default(false)
    form      Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("submissions")
}

type Answer {
    id    String?
    label String
    value String  @default("")
}

model Integration {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    orgId         String   @db.ObjectId
    formId        String   @db.ObjectId
    connectionId  String   @db.ObjectId
    type          String
    isEnabled     Boolean  @default(false)
    spreadsheetId String?  @default("")
    form          Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@map("integrations")
}

type FileObject {
    key  String @default("")
    url  String @default("")
    name String @default("")
}
